[gd_resource type="ShaderMaterial" load_steps=2 format=3 uid="uid://bir20w4hr4u5m"]

[sub_resource type="Shader" id="Shader_sbpld"]
code = "shader_type canvas_item;

vec2 to_polar(vec2 uv) {
	uv = (uv-0.5)*2.0;
	float dist = length(vec2(uv.x, uv.y));
	float angle = atan(uv.x, uv.y) / (2.0 * PI);
	return vec2(dist, angle);
}
vec3 rgb2hsv(vec3 c) {
    float c_max = max(c.r, max(c.g, c.b));
    float c_min = min(c.r, min(c.g, c.b));
    float delta = c_max - c_min;

    float h = 0.0;
    if (delta > 0.00001) {
        if (c_max == c.r) {
            h = mod((c.g - c.b) / delta, 6.0);
        } else if (c_max == c.g) {
            h = (c.b - c.r) / delta + 2.0;
        } else {
            h = (c.r - c.g) / delta + 4.0;
        }
        h /= 6.0;
        if (h < 0.0) h += 1.0;
    }

    float s = (c_max > 0.0) ? (delta / c_max) : 0.0;
    float v = c_max;

    return vec3(h, s, v);
}

vec3 hsv2rgb(vec3 _c) {
    vec4 _K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 _p = abs(fract(_c.xxx + _K.xyz) * 6.0 - _K.www);
    return _c.z * mix(_K.xxx, clamp(_p - _K.xxx, 0.0, 1.0), _c.y);
}


uniform float border_color_strength = 0.0;
uniform float border_alpha = 0.0;
uniform vec2 center_width = vec2(0.4, 0.2);
uniform float light_decay_pow = 0.9;

void vertex() {
	// Called for every vertex the material is visible on.
}

void fragment() {
	vec2 uv = UV.xy;
	vec2 polar_uv = to_polar(uv);
	//vec2 lerp_vector = max(vec2(0.0, 0.0), polar_uv.x - center_width/2.0) / (0.5 - center_width/2.0);
	vec2 normalized_distance = (polar_uv.x - center_width) / (1.0 - center_width);
	vec2 lerp_vector = vec2(max(0, normalized_distance.x), max(0, normalized_distance.y));
	float lerp_value = lerp_vector.x * lerp_vector.y;
	
	
	float alpha = mix(1, border_alpha, lerp_value);
	float color_strength = pow(mix(1, border_color_strength, lerp_value), light_decay_pow);
	
	vec3 hsv_color = rgb2hsv(COLOR.rgb);
	hsv_color.z *= color_strength;
	vec3 color = hsv2rgb(hsv_color);
	COLOR = vec4(color, alpha);
	
	
	// Called for every pixel the material is visible on.
}






"

[resource]
shader = SubResource("Shader_sbpld")
shader_parameter/border_color_strength = 0.0
shader_parameter/border_alpha = 0.0
shader_parameter/center_width = Vector2(0.2, 0.05)
shader_parameter/light_decay_pow = 0.2
